{"version":3,"sources":["pages.js","pages/components/MyCalendar.js","pages/events.js","App.js","serviceWorker.js","index.js"],"names":["Index","About","Board","Contact","localizer","momentLocalizer","moment","MyCalendar","eventList","culture","events","components","event","name","description","location","agenda","style","color","href","id","target","onSelectEvent","selectedEvent","window","open","eventPropGetter","backgroundColor","borderRadius","opacity","border","display","Events","useState","setEvents","fetch","method","headers","Headers","Authorization","then","responce","json","data","forEach","item","place","start","start_time","end","end_time","allday","Date","calendarFormat","length","console","log","height","AppRouter","basename","className","to","src","process","alt","path","exact","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2c5f3a16.chunk.js","sourcesContent":["import React from \"react\";\n\nexport function Index() {\n    return <h2>Home</h2>;\n}\n\nexport function About() {\n    return <h2>Om</h2>;\n}\n\nexport function Board() {\n    return <h2>Bestyrelsen</h2>;\n}\n\nexport function Contact() {\n    return <h2>Kontakt os</h2>\n}\n","import { Calendar, Views, momentLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from \"moment\";\nimport React from \"react\";\n\n\nconst localizer = momentLocalizer(moment);\n\nexport default function MyCalendar(eventList) {\n\tconst redirectToEvent = id => {\n\t\twindow.open(\"https://facebook.com/events/\" + id, \"_blank\");\n\t\t// window.location.assign(\"https://facebook.com/events/\" + id)\n\t};\n\n\tfunction CustomEvent({ event }) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<em>{event.name}</em>\n\t\t\t\t<p>{event.description}</p>\n\t\t\t\t<p>Placering: {event.location}</p>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tfunction CustomEventAgenda({ event }) {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<em>{event.name}</em>\n\t\t\t\t<p>{event.description}</p>\n\t\t\t\t<p>Placering: {event.location}</p>\n\t\t\t\t<a style={{color: '#81c341'}} href={\"https://facebook.com/events/\" + event.id} target={\"_blank\"}>Facebook event</a>\n\t\t\t</div>\n\t\t);\n\t}\n\n\n\tfunction eventStyleGetter() {\n\t\tconst backgroundColor = \"#\" + 424242;\n\t\tconst style = {\n\t\t\tbackgroundColor: backgroundColor,\n\t\t\tborderRadius: \"5px\",\n\t\t\topacity: 0.8,\n\t\t\tcolor: \"white\",\n\t\t\tborder: \"0px\",\n\t\t\tdisplay: \"block\",\n\t\t};\n\t\treturn {\n\t\t\tstyle: style\n\t\t};\n\t}\n\n\treturn (\n\t\t<Calendar\n\t\t\tculture={\"en-GB\"}\n\t\t\tevents={eventList}\n\t\t\tlocalizer={localizer}\n\t\t\t//defaultDate={new Date()}\n\t\t\tcomponents={{\n\t\t\t\tevent: CustomEvent,\n\t\t\t\tagenda: {\n\t\t\t\t\tevent: CustomEventAgenda,\n\t\t\t\t},\n\t\t\t}}\n\t\t\tonSelectEvent={selectedEvent => redirectToEvent(selectedEvent.id)}\n\t\t\teventPropGetter={() => eventStyleGetter()}\n\t\t/>\n\t);\n}\n","import React from \"react\";\nimport { useState } from \"react\";\nimport MyCalendar from \"./components/MyCalendar\";\n\nexport default function Events() {\n\tlet data = [];\n\n\tconst [events, setEvents] = useState(data);\n\n\t//TODO fetch happens twice on page load\n\t//TODO fix token using graph.facebook api\n\tconst onGetEventsFromFacebook = () => {\n\t\tfetch(\"https://graph.facebook.com/DSAUdk/events\", {\n\t\t\tmethod: \"get\",\n\t\t\theaders: new Headers({\n\t\t\t\tAuthorization:\n\t\t\t\t\t\"Bearer EAAeEg2Lpd8EBAOhJ3S7INLOsWzyrZAWJjtohIwO71qrOr75TGj00Rf6C7y6TEv7ZCYDg6ADqzOzZALhRtleZBDOAqZAihZAbPqP3M6zm8rQKtQxyztLFcJyHHR7JuQAMKOphwfm5CHAcQahVfhZCLI2ZC4ghG8FZBmZCbl4oEqZADgj8AZDZD\"\n\t\t\t})\n\t\t})\n\t\t\t.then(responce => responce.json())\n\t\t\t.then(json => json.data)\n\t\t\t.then(data => calendarFormat(data))\n\t\t\t.then(data => {\n\t\t\t\tif (events.length === data.length) {\n\t\t\t\t\tconsole.log(\"no event update\");\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"events updated\");\n\t\t\t\t\tsetEvents(data);\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\tonGetEventsFromFacebook();\n\tconsole.log(\"events function\");\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Events</h2>\n\t\t\t<div style={{ height: 700 }}>{MyCalendar(events)}</div>\n\t\t</div>\n\t);\n}\n\nfunction calendarFormat(data) {\n\tdata.forEach(item => {\n\t\titem.location = item.place.name;\n\t\tdelete item[\"place\"];\n\t\titem.start = item.start_time;\n\t\tdelete item[\"start_time\"];\n\t\titem.end = item.end_time;\n\t\tdelete item[\"end_time\"];\n\t\titem.allday = false;\n\t\titem.start = new Date(item.start);\n\t\titem.end = new Date(item.end);\n\t});\n\n\treturn data;\n\t// console.log(data);\n}\n","import React from \"react\";\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Index, About, Contact, Board } from \"./pages\";\nimport Events from \"./pages/events\";\n\nfunction AppRouter() {\n    return (\n        <HashRouter basename=\"/\">\n            <nav className=\"navigation\">\n                <div className=\"navigation__content\">\n                    <Link to=\"/\">\n                        <img\n                            className=\"navigation__logo\"\n                            src={process.env.PUBLIC_URL + \"/DSAU_logo.png\"} // process.env.PUBLIC_URL links to public folder\n                            alt=\"DSAU Logo\"\n                        />\n                    </Link>\n                    <ul className=\"navigation__list\">\n                        <li>\n                            <Link to=\"/\">Hjem</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/om/\">Om</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/kontakt/\">Kontakt</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/bestyrelse/\">Bestyrelse</Link>\n                        </li>\n                        <li>\n                            <Link to=\"/events/\">Events</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div className=\"content\">\n                <Route path=\"/\" exact component={Index} />\n                <Route path=\"/om/\" component={About} />\n                <Route path=\"/kontakt/\" component={Contact} />\n                <Route path=\"/bestyrelse/\" component={Board} />\n                <Route path=\"/events/\" component={Events}/>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}